Step 1 -Folder structure -backend -      server.js      package files      gitignore      frontend Folder -                      react stuffSo we deploy from the backend (user must be in the backend folder)Step 2 -backend Package.json  -the scripts section "scripts": {    "test": "echo \"Error: no test specified\" && exit 1",    "start": "node server.js",    "server": "nodemon server.js",    "frontend": "npm start --prefix frontend",    "dev": "concurrently \"npm run server\" \"npm run frontend\"",    "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix frontend &&npm run build --prefix frontend"  },server.js can be changed to whatever the users server file isthe frontend can also be changed to whatever the user's frontend folder name isStep 3 :backend server file -this code has to be addedconst path = require("path");if (process.env.NODE_ENV === "production") {  app.use(express.static("frontend/build"));  app.get("*", (req, res) => {    res.sendFile(path.resolve(__dirname, "frontend", "build", "index.html"));  });}
const PORT = process.env.PORT || 3001;app.listen(PORT, () => {  console.log(`Server is listening on port ${PORT}`);});also here frontend to change to what the users frontend folder name isAnd then in the Frontendthe react package.jsonmake sure the proxy has been entered and it matches the backend port"proxy": "http://localhost:3001",After all this you can start the normal deploy to Heroku process